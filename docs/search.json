[
  {
    "objectID": "Introduce.html",
    "href": "Introduce.html",
    "title": "Giới thiệu",
    "section": "",
    "text": "Hôm nay chúng ta sẽ học về một hoạt động quan trọng trong các hoạt động quản lí chuỗi cung ứng - Material Requirement Planning.\nNhắc lại bài cũ, từ nghiên cứu của (Natalia Szozda and Sylwia Werbińska-Wojciechowska2 2013), ta đã học về một function quan trọng là Demand planning và cách sử dụng R để dự đoán được nhu cầu của khách hàng trong tương lai. Vậy sau khi đã có số liệu dự đoán, ta sẽ bắt đầu xây dựng kế hoạch phân phối nhằm đảm bảo đủ lượng hàng hóa trưng bày bán cho khách hàng ở các cửa hàng, trung tâm thương mại, siêu thị,…\n\n\n\nHình 1: Tổng quan các hoạt động quan trọng trong Supply Chain Management\n\n\nVậy hàng hóa lấy ở đâu để phân phối ? Hàng hóa thường sẽ lấy từ nhà kho gần nhất để giảm chi phí vận chuyển. Nhưng nếu hàng hóa ở kho không đủ thì ta cần gửi yêu cầu cho phòng Production (Sản xuất) để họ lên kế hoạch sản xuất ra hàng hóa mới bù vào khoảng thiếu hụt. Sau khi đã xác định kế hoạch rõ ràng, phòng Production (Sản xuất) sẽ gửi yêu cầu cho phòng Procument (Thu mua) để mua các nguyên vật liệu cần thiết cho việc sản xuất.\nBạn có thể thấy quy trình làm việc phức tạp phải không ? Nhưng quy trình này chỉ bao gồm các hoạt động của việc quản lí chuỗi cung ứng của 1 sản phẩm duy nhất. Thông thường, các công ty sẽ có vài chục đến hàng trăm sản phẩm khác nhau. Ví dụ như công ty đa quốc gia Unilever có đến 400 nhãn hàng và mỗi nhãn hàng trung bình sẽ có 10-20 sản phẩm nên bạn có thể tưởng tượng được mức độ phức tạp và dày đặc của những kế hoạch sản xuất, phân phối hằng tuần hằng tháng.\nVì vậy, để xử lí công việc này, các nhà chuyên gia đã đề xuất ra công cụ Material Requirement Planning và cũng là keyword mà chúng ta sẽ tìm hiểu và thực hành ở R trong bài viết này."
  },
  {
    "objectID": "MRP.html",
    "href": "MRP.html",
    "title": "Giới thiệu",
    "section": "",
    "text": "Code\n#Call packages:\npacman::p_load(rio,\n               here,\n               janitor,\n               tidyverse,\n               dplyr,\n               magrittr,\n               lubridate,\n               stringr\n               )\n\n\nDưới đây là tệp dữ liệu về nhu cầu của khách hàng ở 3 nhà kho khác nhau. Bạn có thể nhấn vào nút dưới đây để tải về.\n\n\n Download data"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Cao Xuân Lộc",
    "section": "",
    "text": "Xin chào, mình là Lộc, sinh năm 2003 và là một chàng trai đến từ mảnh đất đầy nắng và gió - Phú Yên, Việt Nam. Mình có bằng cử nhân trường Đại học Kinh Tế - Tài Chính (UEF) và chuyên ngành của mình là Logistics và quản lý chuỗi cung ứng.\nLà người có niềm đam mê mạnh mẽ với R, mình có sở thích viết post về việc phân tích dữ liệu với R để ứng dụng vào các công việc, bài toán thường gặp trong Supply Chain. Ngoài ra, sở thích của mình là nghe sách nói và đi bộ!\nCâu slogan mà mình thích nhất là: “Don’t fear the risk, fear the opportunity lost!” và đó cũng là cách mình sống và làm việc đến bây giờ 💝💝💝.\nHi vọng các bạn sẽ thích bài viết của mình!"
  },
  {
    "objectID": "Introduce.html#định-nghĩa",
    "href": "Introduce.html#định-nghĩa",
    "title": "Giới thiệu",
    "section": "2.1 Định nghĩa:",
    "text": "2.1 Định nghĩa:\nVề định nghĩa, theo (David Essex, n.d.) ,MRP có thể hiểu là kế hoạch yêu cầu vật liệu và là hệ thống tính toán các vật liệu và linh kiện cần thiết cho sản xuất. Nó bao gồm ba bước: kiểm kê hiện có, xác định vật liệu cần thêm, và lập kế hoạch sản xuất hoặc mua sắm.\n\n\n\nHình 2: Phần mềm MRP Fishbowl\n\n\nNhư hình trên là ứng dụng Fishbowl - được thành lập vào năm 2001 bởi David Williams và một nhóm các nhà phát triển phần mềm tại Utah, Hoa Kỳ. Mục tiêu ban đầu của công ty là tạo ra một giải pháp phần mềm giúp các doanh nghiệp nhỏ và vừa quản lý kho và quy trình sản xuất một cách hiệu quả hơn."
  },
  {
    "objectID": "Introduce.html#lý-do-sử-dụng",
    "href": "Introduce.html#lý-do-sử-dụng",
    "title": "Giới thiệu",
    "section": "2.2 Lý do sử dụng:",
    "text": "2.2 Lý do sử dụng:\nMRP quan trọng vì giúp đảm bảo có đủ tồn kho đúng thời điểm với chi phí thấp nhất, cải thiện hiệu quả, linh hoạt và lợi nhuận của sản xuất. Nó nâng cao năng suất lao động, chất lượng sản phẩm và giảm chi phí. MRP cũng giúp các nhà sản xuất nhanh chóng đáp ứng nhu cầu thị trường và tránh tình trạng thiếu hàng, góp phần vào sự tăng trưởng doanh thu.\nThông thường, MRP sẽ kết hợp như một tính năng trong phần mềm WMS - Warehouse Management Software vì việc lên kế hoạch vật tư cần dựa vào thông tin đầu vào là hàng hóa, nguyên vật liệu tồn kho còn lại bao nhiêu để tính toán đúng số lượng vừa đủ để đặt hàng, tránh việc dư thừa, tồn kho."
  },
  {
    "objectID": "Introduce.html#bom-là-gì",
    "href": "Introduce.html#bom-là-gì",
    "title": "Giới thiệu",
    "section": "3.1 BOM là gì:",
    "text": "3.1 BOM là gì:\nTrong quy trình có nhắc đến cụm từ BOM nghĩa là Bill of Material - là một tài liệu quan trọng trong sản xuất, cung cấp danh sách chi tiết các nguyên liệu, linh kiện và bộ phận cần thiết để sản xuất một sản phẩm cụ thể. Bạn có thể hình dung là để có thể tạo một chiếc bánh thì cần phải có đầy đủ các nguyên vật liệu để làm bánh từ máy xoay bột, lò nướng, bột, trứng,… và phải được chuẩn bị đầy đủ trước khi bắt tay vào làm bánh.\nBOM không chỉ liệt kê các thành phần mà còn thường bao gồm thông tin như:\n\nSố lượng: Số lượng của từng thành phần cần thiết.\nMã linh kiện: Mã hoặc số nhận diện của mỗi linh kiện.\nĐơn vị đo: Đơn vị tính của từng nguyên liệu (ví dụ: kg, cái, mét).\nCấp độ: Cấp độ của mỗi thành phần trong cấu trúc sản phẩm, giúp xác định thứ tự lắp ráp.\nThông tin bổ sung: Có thể bao gồm thông tin về nhà cung cấp, yêu cầu chất lượng, hoặc hướng dẫn lắp ráp.\n\nĐể dễ hình dung, bạn có thể xem bảng dưới đây minh họa về BOM của xe hơi.\n\n\n\n\n\n\n  \n    \n      Bill of Material for vehicle components\n    \n    \n      List of required materials\n\n    \n    \n      Component Name\n      Quantity\n      Part Code\n      Unit\n    \n  \n  \n    Khung xe\n1\nFRAME-001\ncái\n    Động cơ\n1\nENG-001\ncái\n    Hệ thống truyền động\n1\nTRANS-001\ncái\n    Bánh xe\n4\nWHEEL-001\ncái\n    Hệ thống phanh\n4\nBRAKE-001\ncái\n    Hệ thống treo\n2 (trước), 2 (sau)\nSUSP-001\ncái\n    Nội thất\n1 bộ\nINTERIOR-001\nbộ\n    Hệ thống điện\n1 bộ\nELECTRICAL-001\nbộ\n    Cửa\n4\nDOOR-001\ncái\n    Kính chắn gió\n1\nWINDSHIELD-001\ncái\n  \n  \n    \n      Create by package {gt} in R\n    \n  \n  \n\n\nBảng 1: Ví dụ về BOM cho sản phẩm xe ô tô\n\n\nNhưng thông thường, người ta sẽ trình bày BOM dưới dạng hình cây như này, khá giống Decision tree - một mô hình Machine Learning. Vì dụ ta có quy trình làm bánh pía như sau:\nBước 1: Chuẩn bị phần nhân:\n\nĐậu xanh: Ngâm đậu xanh qua đêm, sau đó hấp chín và xay nhuyễn.\nThịt heo: Nếu sử dụng, xào thịt heo với một chút gia vị cho chín. Trộn đều với đậu xanh đã xay, thêm hạt sen (nếu dùng), mứt (nếu thích) và trộn đều cho đến khi hỗn hợp mịn.\nChia nhân thành các phần nhỏ, viên tròn và để nguội. Nếu có trứng muối, bạn có thể đặt vào giữa viên nhân.\n\nBước 2: Chuẩn bị phần vỏ:\n\nTrộn bột mì, đường lại với nhau.\nTừ từ thêm dầu ăn và nước vào bột, nhào cho đến khi bột mịn và không dính tay.\nChia bột thành các phần nhỏ tương ứng với số viên nhân.\n\nBước 3: Tạo hình bánh: - Cán mỏng từng miếng bột ra, sau đó đặt viên nhân vào giữa. - Gói kín lại và vo tròn bánh cho đẹp.\nBước 4: Nướng bánh: - Làm nóng lò ở 180 độ C. - Đặt bánh lên khay nướng có lót giấy nến. - Nướng khoảng 20-25 phút hoặc cho đến khi bánh có màu vàng đẹp.\nBước 5:. Hoàn thiện: - Để bánh nguội trước khi thưởng thức. Bánh pía ngon hơn khi để nguội.\n{width = 80%}\nMục tiêu: giúp quản lý quy trình sản xuất hiệu quả hơn, đảm bảo rằng tất cả các nguyên liệu cần thiết đều có sẵn và đúng thời điểm, đồng thời giảm thiểu rủi ro về việc thiếu hụt nguyên liệu.\nNhư vậy, BOM có thể được xem là thành phần quan trọng nhất trong kế hoạch MRP."
  },
  {
    "objectID": "Introduce.html#khó-khăn-trong-thực-tế",
    "href": "Introduce.html#khó-khăn-trong-thực-tế",
    "title": "Giới thiệu",
    "section": "3.2 Khó khăn trong thực tế:",
    "text": "3.2 Khó khăn trong thực tế:\nVề lý thuyết xây dựng kế hoạch MRP không khó, bạn chỉ cần số liệu thực tế của kho, 1 bảng BOM như trên và dự đoán nhu cầu của khách hàng là sẽ tính toán được số lượng cần thiết nhưng thực tế bao giờ cũng khác xa với lý thuyết.\nTheo nghiên cứu của(Baskaran4 2018), tác giả đề cập đến các vấn đề thường gặp đối với MRP:\n\n\n\nHình 5: Các vấn đề thường gặp khi dùng MRP\n\n\nNếu bạn lười đọc, mình sẽ tóm tắt lại:\n\nHệ thống MRP đòi hỏi dữ liệu đầu vào chính xác và cụ thể thì mới đưa ra kết quả ít sai lệch với thực tế.\nMRP gặp khó khăn khi đối mặt với sự thay đổi đột ngột về tồn kho, nguyên nhân có thể là do xuất hiện uncertainty demand hoặc thiếu các bảng BOM. Điều này làm cho việc lên kế hoạch trước không đạt hiệu quả cao.\nKhi có sự thay đổi ở cấp trên, MRP sẽ phải tính toán lại toàn bộ nên điều này rất tốn thời gian và nguồn lực.\n\nTuy vậy, việc ứng dụng MRP vẫn rỗng rãi vì nó thích hợp với mọi kiểu công ty, doanh nghiệp."
  },
  {
    "objectID": "Introduce.html#công-thức-tính",
    "href": "Introduce.html#công-thức-tính",
    "title": "Giới thiệu",
    "section": "3.3 Công thức tính:",
    "text": "3.3 Công thức tính:\nVậy để xây dựng kế hoạch MRP, ta cần tính toán các tham số dưới đây:\n\n\n\n\n    \n    \n    How to Calculate the MRP\n    \n    \n    \n\n\n\nHow to Calculate the MRP\n\n\n\n\n\n\n\n3.3.1 Predicted demand\nĐầu tiên, vẫn là dự đoán nhu cầu của khách hàng trong tương lai. Tùy vào kế hoạch bạn xây dựng, có thể là 1 tháng, 3 tháng hoặc 6 tháng … mà chọn. Như đã đề cập ở trên, đây là dữ liệu quan trọng làm đầu vào cho MRP và cũng là cơ sở để xác định Safety stock.\n\n\n3.3.2 Gross requirement\nVề định nghĩa, Gross requirement là tổng nhu cầu cho một vật liệu hoặc linh kiện cụ thể trong một khoảng thời gian nhất định, mà không xem xét bất kỳ tồn kho có sẵn hay các khoản thu nhập đã lên lịch.\n\\[\n\\text{Gross Requirement} = \\text{Total Demand} \\times \\text{Component Quantity per product}\n\\]\n\n\n3.3.3 Scheduled Receipts\nScheduled Receipts là thuật ngữ dùng để chỉ các đơn hàng hoặc lô hàng đã được đặt và dự kiến sẽ được nhận trong một khoảng thời gian nhất định. Ví dụ bạn đang làm kế hoạch nhập vật liệu A cho tháng 9 thì trước đó bạn đã đặt hàng vật liệu A là 1000 cái thì scheduled receipts sẽ bằng 1000. Do đó giả sử đơn giản là bạn đang đơn hàng 2000 cái thì bạn chỉ cần đặt hàng 1000 cái nữa vào tháng 9.\nDữ liệu để tính toán sẽ thường lấy từ các Purchase Orders từ phòng thu mua hoặc Orders từ các nhà phân phối.\n\n\n3.3.4 On-Hand Inventory\nOn-hand inventory nghĩa là lượng hàng hóa còn tồn đọng trong kho, cửa hàng của bạn tại một thời điểm nào đó. Dữ liệu này dễ dàng lấy được từ các báo cáo theo ngày, theo tuần ở các cửa hàng, kho.\n\\[\n\\text{On-Hand Inventory} = \\text{Tồn kho đầu kỳ} + \\text{Nhập kho} - \\text{Xuất kho}\n\\]\n\n\n3.3.5 Net Requirements:\nNet requirement nghĩa là lượng hàng hóa còn thiếu để thỏa mãn hết tất cả nhu cầu trong tương lai mà mình đã dự đoán. Công thức tính cũng đơn giản như dưới đây.\n\\[\n\\text{Net Requirement} = \\text{Gross Requirement}−\\text{Scheduled Receipts}−\\text{On-Hand Inventory}\n\\]\nGiả sử, bạn dự đoán tháng sau có 1000 đơn hàng, bạn đã có 200 On-hand inventory và 300 Scheduled receipt vậy thì bạn chỉ cần đặt thêm nguyên vật liệu để sản xuất đủ 500 đơn hàng nữa là xong. Đó cũng chính là số lượng cần xác định trong kế hoạch MRP.\nTiếp theo ta sẽ tìm hiểu thêm về khái niệm Safety stock và reorder point ở trang Thời gian xây dựng MRP"
  },
  {
    "objectID": "MRP.html#plot",
    "href": "MRP.html#plot",
    "title": "Giới thiệu",
    "section": "1 Plot:",
    "text": "1 Plot:"
  },
  {
    "objectID": "MRP.html#table",
    "href": "MRP.html#table",
    "title": "Giới thiệu",
    "section": "2 Table:",
    "text": "2 Table:\n\n\nWarning: package 'reactable' was built under R version 4.2.3\n\n\n\n\n\n\n\nQuy trình:\nBước 1: Chuẩn bị phần nhân:\n\nĐậu xanh: Ngâm đậu xanh qua đêm, sau đó hấp chín và xay nhuyễn.\nThịt heo: Nếu sử dụng, xào thịt heo với một chút gia vị cho chín. Trộn đều với đậu xanh đã xay, thêm hạt sen (nếu dùng), mứt (nếu thích) và trộn đều cho đến khi hỗn hợp mịn.\nChia nhân thành các phần nhỏ, viên tròn và để nguội. Nếu có trứng muối, bạn có thể đặt vào giữa viên nhân.\n\nBước 2: Chuẩn bị phần vỏ:\n\nTrộn bột mì, đường lại với nhau.\nTừ từ thêm dầu ăn và nước vào bột, nhào cho đến khi bột mịn và không dính tay.\nChia bột thành các phần nhỏ tương ứng với số viên nhân.\n\nBước 3: Tạo hình bánh: - Cán mỏng từng miếng bột ra, sau đó đặt viên nhân vào giữa. - Gói kín lại và vo tròn bánh cho đẹp.\nBước 4: Nướng bánh: - Làm nóng lò ở 180 độ C. - Đặt bánh lên khay nướng có lót giấy nến. - Nướng khoảng 20-25 phút hoặc cho đến khi bánh có màu vàng đẹp.\nBước 5:. Hoàn thiện: - Để bánh nguội trước khi thưởng thức. Bánh pía ngon hơn khi để nguội.\n\n# Install and load the DiagrammeR library\nlibrary(DiagrammeR)\n\ngrViz(\"\n  digraph {\n    layout = dot\n\n    node [shape = box, style=filled, fontname=Helvetica, width=2, color = orange]\n    edge [color = grey, arrowhead = vee]\n\n    A[label = 'Bánh Pía:\\n1 cái', color = '#FFD700', fontcolor = black]\n    B[label = 'Hạt sen\\n = 20g']\n    C[label = 'Mứt\\n = 10g']\n    D[label = 'Lót giấy nến: 1 cái']\n    E[label = 'Phần vỏ:\\n1 cái']\n    F[label = 'Bột mì\\n= 150g']\n    G[label = 'Dầu ăn\\n= 30g']\n    H[label = 'Nước\\n= 60ml']\n    J[label = 'Phần nhân:\\n1 cái']\n    K[label = 'Trứng muối\\n= 1 quả']\n    L[label = 'Thịt heo\\n= 30g']  \n    Q[label = 'Đậu xanh\\n= 100g']\n\n    Step1[label = 'B1: Chuẩn bị NVL\\nTime: 15 phút', color = lightblue]\n    Step2[label = 'B2: Làm phần vỏ\\nTime: 30 phút', color = lightblue]\n    Step3[label = 'B3: Làm phần nhân\\nTime: 20 phút', color = lightblue]\n    Step4[label = 'B4: Gói bánh\\nTime: 10 phút', color = lightblue]\n    Step5[label = 'B5: Hấp bánh\\nTime: 45 phút', color = lightblue]\n\n    A -&gt; B\n    A -&gt; C\n    B -&gt; D\n    C -&gt; D\n    D -&gt; E\n    D -&gt; J\n    E -&gt; F\n    E -&gt; G\n    E -&gt; H\n    J -&gt; K\n    J -&gt; L\n    J -&gt; Q\n  \n  // Kết nối giữa các bước sản xuất với đường nét liền\n    Step5 -&gt; Step4 [style=solid]\n    Step4 -&gt; Step3 [style=solid]\n    Step3 -&gt; Step2 [style=solid]\n    Step2 -&gt; Step1 [style=solid]\n  }\n\")\n\n Bạn có thể để ý công thức"
  },
  {
    "objectID": "MRP.html#section",
    "href": "MRP.html#section",
    "title": "Giới thiệu",
    "section": "1 ",
    "text": "1 \nNhư vậy, đối với mặt hàng bánh pía này, ta cần xác định khi nào hàng sẽ có nguy cơ bị outstock để lập kế hoạch cung ứng cho khoảng thời gian là 3 tháng tiếp theo.\n\n\nCode\n## Gộp dữ liệu từ training set và testing set thành một:\ndata_prepared_tbl &lt;- bind_rows(training(splits), \n                               testing(splits))\n\n\n## Tạo thêm các hàng cho dữ liệu sắp tới. Ví dụ ta cần trong 6 tháng thì hàm sẽ tạo thêm 365*4 = 1460 hàng:\nfuture_tbl &lt;- data_prepared_tbl %&gt;%\n    group_by(WH) %&gt;%\n    future_frame(.length_out = \"3 months\") %&gt;%\n    ungroup()\n\n## Dự đoán nhu cầu cho 3 tháng tiếp theo:\nrefit_tbl &lt;- modeltime_tbl %&gt;%\n    modeltime_refit(data_prepared_tbl)\n\ninvisible(capture.output({\nrefit_tbl&lt;-refit_tbl %&gt;%\n    modeltime_forecast(\n        new_data    = future_tbl,\n        actual_data = data_prepared_tbl,\n        keep_data   = TRUE)\n}))\n\n\n\n\nCode\n## Gộp dữ liệu từ training set và testing set thành một:\ndata_prepared_tbl &lt;- bind_rows(training(splits), \n                               testing(splits))\n\n\n## Tạo thêm các hàng cho dữ liệu sắp tới. Ví dụ ta cần trong 6 tháng thì hàm sẽ tạo thêm 365*4 = 1460 hàng:\nfuture_tbl &lt;- data_prepared_tbl %&gt;%\n    group_by(WH) %&gt;%\n    future_frame(.length_out = \"3 months\") %&gt;%\n    ungroup()\n\n## Dự đoán nhu cầu cho 3 tháng tiếp theo:\nrefit_tbl &lt;- modeltime_tbl %&gt;%\n    modeltime_refit(data_prepared_tbl)\n\ninvisible(capture.output({\nrefit_tbl&lt;-refit_tbl %&gt;%\n    modeltime_forecast(\n        new_data    = future_tbl,\n        actual_data = data_prepared_tbl,\n        keep_data   = TRUE)\n}))\n\n\nBạn có thể để ý công thức"
  },
  {
    "objectID": "Time.html",
    "href": "Time.html",
    "title": "Thời gian để xây dựng MRP",
    "section": "",
    "text": "Sau khi bạn học về MRP, bạn sẽ cảm thấy rằng việc tính toán và xây dựng kế hoạch MRP chỉ là vấn đề về thời gian, hoàn toàn dễ tính toán (vì chỉ có cộng trừ nhân chia). Vậy câu hỏi quan trọng nhất chính là “Khi nào bạn cần xây dựng kế hoạch và bắt đầu đặt hàng từ nhà cung ứng ?”.\nViệc xác định khi nào đòi hỏi 2 yếu tố: thời điểm và điều kiện kích hoạt. Thời điểm đơn giản chính là thời gian chính xác để xây dựng MRP và gửi đơn đặt hàng. Điều kiện kích hoạt nghĩa các tiêu chí cần đạt để chấp nhập yêu cầu cần xây dựng MRP và dựa vào đó để chọn thời điểm phù hợp. Và để xác định chúng, ta cần tính toán 2 nhân tố là: Leadtime và Reorder point.\n\n\n\n\nVề Leadtime sẽ có nhiều cách tính toán và điều này tùy thuộc vào nhà cung ứng của bạn thuộc mô hình doanh nghiệp gì hoặc hợp đồng giữa công ty bạn và nhà cung ứng. Ví dụ bạn làm việc với nhà cung cấp thì thông thường họ sẽ lo luôn hoạt động vận tải và bốc xếp dỡ hàng lên xuống vào kho của bạn và bạn chỉ cần thanh toán các khoảng phí đó. Nhưng nếu bạn tự thuê xe riêng đế tới kho của họ bốc hàng, bạn cần tính toán thêm về chi phí và thời gian vận tải - Transportation time và thời gian bốc xếp - Unloading/Loading time.\nVề tổng quan, các thành phần cơ bản trong công thức tính Leadtime sẽ gồm:\n\n\n\nHình 6: Các thành phần trong Lead time\n\n\nMình có thể chia thành các dạng doanh nghiệp và mỗi doanh nghiệp thì sẽ cần tính toán leadtime như thế nào dưới đây:\n\n\n\n\n\n\n\nViệc xác định leadtime quan trọng vì nó là tham số để tính safety stock như công thức dưới đây. Đây là công thức tổng quan nhất về Safety stock nhưng có nhiều nghiên cứu gần đây cũng đưa ra các công thức khác để nâng cao hiệu quả trong quản lí chuỗi cung ứng.\n\n\n\nNgoài ra, còn có khái niệm về Safety leadtime được (Hariharan and Paul Zipkin, n.d.) định nghĩa là: “the difference between the release time and the due date minus the supply lead time of the product, where supply lead time is defined as the time that is required to produce the order”, được hiểu đơn giản là thời điểm nhằm đảm bảo quá trình được diễn ra suôn sẻ.\nSafety leadtime có thể được lựa chọn làm tiêu chí thay thế cho Safety stock hoặc thậm chí được ưu tiên với điều kiện dự báo về nhu cầu phải có độ chính xác cao. Số lượng hàng tồn kho an toàn cần thiết hoặc độ dài của safety leadtime bị ảnh hưởng bởi mức độ của uncertainty mà một đơn vị sản xuất gặp phải.\n\n\n\nHình 7: Mô tả về Safety Leadtime\n\n\n\n\n\n\nTrước khi nói về reorder point, mình sẽ giải thích sơ về safety stock cho những bạn nào chưa hiểu về khái niệm này.\n\n\nSafety stock hay còn gọi là tồn kho an toàn được định nghĩa là một lượng hàng hóa dự trữ thêm nhằm đảm bảo rằng doanh nghiệp có thể đáp ứng nhu cầu của khách hàng ngay cả khi có sự biến động trong nhu cầu hoặc thời gian giao hàng. Công thức tính là:\n\\[\n\\text{Safety Stock} = \\text{Service Level Factor} \\times \\sqrt{\\text{Lead Time}} \\times \\sigma\n\\]\n\n\n\nHình 8: Mô tả về Reorder point\n\n\nNhư hình mô tả bên trên từ (Edouard Thieuleux 2022), bạn sẽ thấy rằng reorder point sẽ luôn cao hơn safety stock bởi vì safety stock là 1 thành phần trong công thức tính reorder point. Ngoài ra, cả hai có điểm khác biệt ở mục đích sử dụng, trong đó:\n\nMục đích của việc duy trì tồn kho an toàn là để giảm thiểu rủi ro outstock khi đối mặt với vấn đề về supply/demand uncertainty - sự biến động không lường trước được. Ngoài ra, việc đảm bảo 1 lượng safety stock cũng giúp quy trình hoạt động không bị gián đoạn và giữ chân khách hàng. Hiểu một cách đơn giản, giả sử safety stock của bạn là mức 300 món hàng thì khi lượng hàng trong kho của bạn giảm xuống mức 300 là bạn phải đặt thêm hàng từ nhà cung ứng cho dù không có đơn hàng đặt từ khách hàng.\nMục đích của điểm đặt hàng là nhằm đảm bảo sẽ cung cấp đủ hàng trong 1 khoảng thời gian cụ thể trong tương lai. Khi lượng hàng chạm đến một lượng cụ thể thì bạn cần phải lên các yêu cầu đặt hàng, mua hàng từ các nhà cung ứng.\n\n\n\n\n\nVề reorder point được định nghĩa là điểm đặt hàng lại trong quản lý tồn kho, giúp xác định thời điểm cần đặt hàng thêm hàng hóa để tránh tình trạng hết hàng. ROP được tính dựa trên nhu cầu tiêu thụ hàng hóa trong một khoảng thời gian nhất định và thời gian giao hàng từ nhà cung cấp.\nCông thức đơn giản là:\n\\[\nROP = \\text{Average demand/day} \\times \\text{Lead time (days)}  + \\text{Safety stock}\n\\]\nVậy dựa vào các kiến thức mình vừa đưa ra, chúng ta sẽ bắt đầu xây dựng kế hoạch MRP ở trang Practice in R"
  },
  {
    "objectID": "Time.html#determine-lead-time",
    "href": "Time.html#determine-lead-time",
    "title": "Thời gian để xây dựng MRP",
    "section": "",
    "text": "Về Leadtime sẽ có nhiều cách tính toán và điều này tùy thuộc vào nhà cung ứng của bạn thuộc mô hình doanh nghiệp gì. Về tổng quan, các thành phần cơ bản trong công thức tính Leadtime sẽ gồm:\n\n\n\n    \n    \n    \n    \n\n\n    \n    \n        graph LR;\n            A[Start] --&gt; B[Production time];\n            B --&gt; C[Procurement time];\n            C --&gt; D[Manufacturing time];\n            D --&gt; E[Assembly time];\n            E --&gt; F[Inspection time];\n            F --&gt; G[Loading time];\n            G --&gt; H[Delivery time];\n            H --&gt; I[Unloading Time];\n            I --&gt; K[End];\n    \n    \n\n\nMình có thể chia thành các dạng doanh nghiệp và mỗi doanh nghiệp thì sẽ cần tính toán leadtime như thế nào dưới đây:"
  },
  {
    "objectID": "Time.html#thời-điểm",
    "href": "Time.html#thời-điểm",
    "title": "Thời gian để xây dựng MRP",
    "section": "",
    "text": "Công thức tính Tồn Kho An Toàn là:\nOnce you have calculated your safety stock level, you can use it as an input in your MRP system. You can either add it to your reorder point or subtract it from your available inventory. The reorder point is the minimum inventory level that triggers a replenishment order. The available inventory is the inventory that you have on hand or on order minus the inventory that is allocated or reserved for existing orders. By adjusting your reorder point or available inventory with safety stock, you can ensure that your MRP outputs reflect your desired service level and inventory policy.\n–&gt; Dùng biểu đồ PQ (Product-Quanlity) để tìm phần Runner, Repeater và Stranger. Dựa vào đó để xác định Make to stock dựa vào phần Runner và Repeater và Stock to make dựa vào phần Stranger.\nLưu ý: Safety stock ko phải là một giá trị cố định, sẽ thay đổi theo thời gian hoặc do tác động từ các biến khác."
  },
  {
    "objectID": "Time.html#lead-time",
    "href": "Time.html#lead-time",
    "title": "Thời gian để xây dựng MRP",
    "section": "",
    "text": "Về Leadtime sẽ có nhiều cách tính toán và điều này tùy thuộc vào nhà cung ứng của bạn thuộc mô hình doanh nghiệp gì hoặc hợp đồng giữa công ty bạn và nhà cung ứng. Ví dụ bạn làm việc với nhà cung cấp thì thông thường họ sẽ lo luôn hoạt động vận tải và bốc xếp dỡ hàng lên xuống vào kho của bạn và bạn chỉ cần thanh toán các khoảng phí đó. Nhưng nếu bạn tự thuê xe riêng đế tới kho của họ bốc hàng, bạn cần tính toán thêm về chi phí và thời gian vận tải - Transportation time và thời gian bốc xếp - Unloading/Loading time.\nVề tổng quan, các thành phần cơ bản trong công thức tính Leadtime sẽ gồm:\n\n\n\nHình 6: Các thành phần trong Lead time\n\n\nMình có thể chia thành các dạng doanh nghiệp và mỗi doanh nghiệp thì sẽ cần tính toán leadtime như thế nào dưới đây:\n\n\n\n\n\n\n\nViệc xác định leadtime quan trọng vì nó là tham số để tính safety stock như công thức dưới đây. Đây là công thức tổng quan nhất về Safety stock nhưng có nhiều nghiên cứu gần đây cũng đưa ra các công thức khác để nâng cao hiệu quả trong quản lí chuỗi cung ứng.\n\n\n\nNgoài ra, còn có khái niệm về Safety leadtime được (Hariharan and Paul Zipkin, n.d.) định nghĩa là: “the difference between the release time and the due date minus the supply lead time of the product, where supply lead time is defined as the time that is required to produce the order”, được hiểu đơn giản là thời điểm nhằm đảm bảo quá trình được diễn ra suôn sẻ.\nSafety leadtime có thể được lựa chọn làm tiêu chí thay thế cho Safety stock hoặc thậm chí được ưu tiên với điều kiện dự báo về nhu cầu phải có độ chính xác cao. Số lượng hàng tồn kho an toàn cần thiết hoặc độ dài của safety leadtime bị ảnh hưởng bởi mức độ của uncertainty mà một đơn vị sản xuất gặp phải.\n\n\n\nHình 7: Mô tả về Safety Leadtime"
  },
  {
    "objectID": "Time.html#safety-stock",
    "href": "Time.html#safety-stock",
    "title": "Thời gian để xây dựng MRP",
    "section": "",
    "text": "Trước khi nói về reorder point, mình sẽ giải thích sơ về safety stock cho những bạn nào chưa hiểu về khái niệm này.\n\n\nSafety stock hay còn gọi là tồn kho an toàn được định nghĩa là một lượng hàng hóa dự trữ thêm nhằm đảm bảo rằng doanh nghiệp có thể đáp ứng nhu cầu của khách hàng ngay cả khi có sự biến động trong nhu cầu hoặc thời gian giao hàng. Công thức tính là:\n\\[\n\\text{Safety Stock} = \\text{Service Level Factor} \\times \\sqrt{\\text{Lead Time}} \\times \\sigma\n\\]\n\n\n\nHình 8: Mô tả về Reorder point\n\n\nNhư hình mô tả bên trên từ (Edouard Thieuleux 2022), bạn sẽ thấy rằng reorder point sẽ luôn cao hơn safety stock bởi vì safety stock là 1 thành phần trong công thức tính reorder point. Ngoài ra, cả hai có điểm khác biệt ở mục đích sử dụng, trong đó:\n\nMục đích của việc duy trì tồn kho an toàn là để giảm thiểu rủi ro outstock khi đối mặt với vấn đề về supply/demand uncertainty - sự biến động không lường trước được. Ngoài ra, việc đảm bảo 1 lượng safety stock cũng giúp quy trình hoạt động không bị gián đoạn và giữ chân khách hàng. Hiểu một cách đơn giản, giả sử safety stock của bạn là mức 300 món hàng thì khi lượng hàng trong kho của bạn giảm xuống mức 300 là bạn phải đặt thêm hàng từ nhà cung ứng cho dù không có đơn hàng đặt từ khách hàng.\nMục đích của điểm đặt hàng là nhằm đảm bảo sẽ cung cấp đủ hàng trong 1 khoảng thời gian cụ thể trong tương lai. Khi lượng hàng chạm đến một lượng cụ thể thì bạn cần phải lên các yêu cầu đặt hàng, mua hàng từ các nhà cung ứng."
  },
  {
    "objectID": "Time.html#reorder-point",
    "href": "Time.html#reorder-point",
    "title": "Thời gian để xây dựng MRP",
    "section": "",
    "text": "Về reorder point được định nghĩa là điểm đặt hàng lại trong quản lý tồn kho, giúp xác định thời điểm cần đặt hàng thêm hàng hóa để tránh tình trạng hết hàng. ROP được tính dựa trên nhu cầu tiêu thụ hàng hóa trong một khoảng thời gian nhất định và thời gian giao hàng từ nhà cung cấp.\nCông thức đơn giản là:\n\\[\nROP = \\text{Average demand/day} \\times \\text{Lead time (days)}  + \\text{Safety stock}\n\\]\nVậy dựa vào các kiến thức mình vừa đưa ra, chúng ta sẽ bắt đầu xây dựng kế hoạch MRP ở trang Practice in R"
  },
  {
    "objectID": "MRP.html#dự-đoán-nhu-cầu",
    "href": "MRP.html#dự-đoán-nhu-cầu",
    "title": "Giới thiệu",
    "section": "2.1 Dự đoán nhu cầu:",
    "text": "2.1 Dự đoán nhu cầu:\nSau khi đã có dữ liệu, chúng ta sẽ bắt đầu dự đoán nhu cầu của khách hàng dựa vào dữ liệu trong quá khứ bằng thư viện modeltime. Mình đã từng viết 1 bài hướng dẫn cách sử dụng thư viện này ở bài viết Time series model 2, bạn có thể xem qua.\n\n\nCode\nlibrary(timetk)\ndemand&lt;-df %&gt;% \n    pivot_longer(cols = c(WHA,WHB,WHC), \n               names_to = \"WH\", \n               values_to = \"Sale\")\n  \np&lt;-demand %&gt;% \n  group_by(WH) %&gt;% \n  plot_time_series(Date, \n                   Sale, \n                   .interactive = T,\n                   .color_var = month(Date))\n\n#| warning: false\n#| message: false\nlibrary(parsnip)\nlibrary(rsample)\n# Devide the dataset to 7:3\nsplits &lt;- initial_time_split(demand, prop = 0.7)\n# ---- AUTO ARIMA ----\n\nlibrary(modeltime)\n# Model Spec\nmodel_spec &lt;- arima_reg() %&gt;%\n    set_engine(\"auto_arima\")\n\n# Fit model:\nmodel_fit &lt;- model_spec %&gt;%\n    fit(Sale ~ Date, \n        data = training(splits))\n\n# Evaluate the model:\ninvisible(capture.output({\nmodeltime_tbl &lt;- modeltime_table(\n    model_fit\n) \nk&lt;-modeltime_tbl %&gt;%\n    modeltime_calibrate(testing(splits)) %&gt;%\n    modeltime_forecast(\n      new_data    = testing(splits),\n      actual_data = demand,\n      keep_data   = TRUE\n    )\n}))\n\n\nMô hình đưa ra có vẻ khá tốt vì sai số trung bình chỉ ở mức 5% đối với nhà kho A và C, nhà kho B thì tệ hơn một chút với mức 10%.\n\nPlot:Table:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n      Summary Statistics\n\n    \n    \n      Source: package gt in R\n\n    \n    \n      WH\n      Observation\n      Mean error (%)\n      Median error (%)\n      Total pass\n      Total fail\n    \n  \n  \n    WHA\n27\n0.0400\n0.04\n15\n12\n    WHB\n27\n0.0922\n0.09\n7\n20\n    WHC\n28\n0.0586\n0.06\n9\n19\n  \n  \n  \n\n\n\n\n\n\n\n\n\n\n\n\nVậy chúng ta đã có dữ liệu đầu vào là dự đoán nhu cầu. Tiếp theo, ta sẽ xây dựng kế hoạch cung ứng hàng hóa dựa trên kết quả trên. Kế hoạch cung ứng nghĩa nhằm đảm bảo rằng hàng hóa và dịch vụ được cung cấp đúng thời điểm, đúng số lượng và với chi phí hợp lý.\nThông thường, kế hoạch cung ứng chỉ gồm 4 thông tin đơn giản là:\n\nĐịa điểm bốc hàng.\nĐịa điểm giao hàng.\nLoại hàng hóa.\nSố lượng hàng.\n\nVà kế hoạch có thể theo ngày đối với các cửa hàng bách hóa, siêu thị hoặc theo tuần đối với các nhà kho. Ngoài ra, còn tùy vào mặt hàng là hàng hóa gì, nhu cầu của hàng hóa như thể nào cũng ảnh hưởng đến thời gian giao hàng như: hàng bán chạy thì cần cung ứng hằng ngày, hàng ế ẩm thì có khi cả tháng mới nhập hoặc xuất một lần.\nNhư vậy, ta cần xác định khi nào hàng sẽ có nguy cơ bị outstock để lập kế hoạch cung ứng cho khoảng thời gian là 1 tháng tiếp theo."
  },
  {
    "objectID": "MRP.html#các-thông-số-của-nhà-kho",
    "href": "MRP.html#các-thông-số-của-nhà-kho",
    "title": "Giới thiệu",
    "section": "2.2 Các thông số của nhà kho:",
    "text": "2.2 Các thông số của nhà kho:\nMỗi nhà kho sẽ có các thông số đánh giá khác nhau. Đối với nhà kho thuộc dạng public warehouse thì họ quan tâm về mức độ lấp đầy chỗ (giống như mua vé xem phim vậy, càng ít chỗ trống nghĩa là doanh thu cao), private warehouse thì thường sẽ quan tâm đến các dịch vụ cao cấp hơn như: kho lạnh, phòng cháy chữa cháy, dạng cross-docking thì đặc biệt quan tâm đến tốc độ chu chuyển hàng hóa trong kho,… Nhưng về tổng quan, để quản lí hàng hóa trong kho sẽ cần các thông số như:\n\nMean of demand: nhu cầu trung bình theo ngày/tháng/năm của sản phẩm.\nStandard deviation of demand: phương sai của sản phẩm.\nSafety stock và Lead time.\n\nĐầu tiên, ta sẽ tính các giá trị Lead time và Safety stock cho từng nhà kho.\n\n\nCode\nlibrary(dplyr)\nlibrary(knitr)\n\nsafety_stock_tbl &lt;- k %&gt;%\n  group_by(WH) %&gt;%\n  summarise(Mean = round(mean(.value),0),\n            SD = sd(.value)) %&gt;%\n  mutate(Leadtime = c(\"2 days\", \"1.5 days\", \"2.5 days\"),\n         Safety_stock = round(1.64 * SD * sqrt(as.numeric(sub(\" days\", \"\", Leadtime))),0),\n         ROP = Mean * as.numeric(sub(\" days\", \"\", Leadtime)) + Safety_stock)\n\nsafety_stock_tbl %&gt;%\n  gt() %&gt;%\n  tab_header(\n    title = md(\"**Safety Stock by Warehouse**\"),\n    subtitle = md(\"*Source: package gt in R*\")\n  ) %&gt;%\n  cols_label(\n    WH = \"Warehouse\",\n    Mean = \"Mean\",\n    SD = \"Standard Deviation\",\n    Leadtime = \"Lead Time\",\n    Safety_stock = \"Safety Stock\",\n    ROP = \"Reorder Point\"\n  ) %&gt;% tab_style(\n    style = list(\n      cell_text(align = \"center\")\n    ),\n    locations = cells_body(columns = everything())\n  ) %&gt;%\n   cols_align(\n    align = \"center\",\n    columns = everything()\n  ) %&gt;% \n  gt_theme_pff() %&gt;% \n  tab_options(\n    table.width = \"80%\"\n  )\n\n\n\n\n\n\n  \n    \n      Safety Stock by Warehouse\n\n    \n    \n      Source: package gt in R\n\n    \n    \n      Warehouse\n      Mean\n      Standard Deviation\n      Lead Time\n      Safety Stock\n      Reorder Point\n    \n  \n  \n    WHA\n166\n7.506268\n2 days\n17\n349.0\n    WHB\n147\n10.361962\n1.5 days\n21\n241.5\n    WHC\n192\n11.803806\n2.5 days\n31\n511.0\n  \n  \n  \n\n\n\n\nSau khi đã có các thông số cần thiết, chúng ta sẽ bắt đầu bước simulation - giả lập cho số lượng hàng tồn kho trong gần 1 tháng tiếp theo. Ở đây mình sẽ xây dựng kế hoạch cho nhà kho B. Trong đó, hàm dưới đây mình viết giúp bạn có thể tính toán cho nhiều trường hợp với 4 đối số:\n\nMã nhà kho: trong bộ dữ liệu này sẽ có 3 nhà kho với các mã: “WHA”, “WHB”, “WHC”. Ở đây, mình đặt warehouse = \"WHB\".\nBatch order: là số lượng hàng đặt từ supplier. Tùy vào đặc tính của sản phẩm, số lượng đặt hàng có thể chênh lệch so với số lượng mà bạn cần. Ví dụ, bạn chỉ cần 450 tấn là vừa đủ nhưng 1 lô hàng mà nhà cung cấp sản xuất sẽ là 500 tấn (quy mô thấp hơn thì chi phí/bao sẽ cao hơn) nên bạn chỉ có thể đặt 500 tấn chứ đặt 450 thì 2 bên sẽ không thỏa thuận được. Ở đây mình đặt quantity = 600.\nLeadtime: khái niệm này mình cũng đề cập ở trên nhưng ở đây bạn có thể cân nhắc việc cộng thêm 1 khoảng safety leadtime để nâng cao hiệu quả công việc. Ví dụ, leadtime của nhà kho C là 2.5 ngày thì mình có thể đặt hàng sớm trước 1 ngày so với ngày dự kiến ROP.\nStarting inventory: lượng hàng tồn kho đầu kì. Ở đây mình đặt inv_start = 500.\n\n\n\nCode\nlong_df&lt;-df %&gt;% \n  pivot_longer(cols = contains(\"WH\"),\n               names_to = \"Warehouse\",\n               values_to = \"Demand\")\n\nf&lt;-function(warehouse,quantity,leadtime,inv_start){\n\n## Inpur:\nbatch_order &lt;- quantity\nsafetystock &lt;- safety_stock_tbl %&gt;%\n  filter(WH == warehouse) %&gt;%\n  select(ROP) %&gt;%\n  pull()\n\nmrp&lt;-long_df %&gt;% \n  filter(Date &gt;= as.Date(\"2024-06-02\") & Warehouse == warehouse) %&gt;%\n  select(c(Date, Demand)) %&gt;% \n  mutate(Inv_start= NA,\n         Inv_end = NA,\n         ROP = NA,\n         Stockout = NA)\n\nmrp$Inv_start[1]&lt;-inv_start\nmrp$Inv_end[1] &lt;-mrp$Inv_start[1]-mrp$Demand[1]\n\n## Processing:\nreorder_goods &lt;- function(data, \n                          safety_stock = safetystock, \n                          lead_time = leadtime, \n                          batch_order = quantity) {\n  data$ROP &lt;- 0\n  last_reorder_day &lt;- -(leadtime + 1)  # Initialize to a value that allows immediate reorder\n\n  for (day in 1:nrow(data)) {\n    # Check if we can place a new order (ROP = 1)\n    if (!is.na(data$Inv_end[day]) && \n        data$Inv_end[day] &lt; safety_stock && \n        (day - last_reorder_day &gt; leadtime)) {  # Ensure at least 2 days since last reorder\n      data$ROP[day] &lt;- 1\n      last_reorder_day &lt;- day  # Update the last reorder day\n\n      reorder_day &lt;- day + lead_time\n\n      if (reorder_day &lt;= nrow(data)) {\n        data$Inv_end[reorder_day] &lt;- ifelse(is.na(data$Inv_end[reorder_day]), 0, data$Inv_end[reorder_day]) + batch_order\n        \n        for (i in (reorder_day+1):nrow(data)) {\n          data$Inv_start[i] &lt;- data$Inv_end[i - 1]\n          data$Inv_end[i] &lt;- data$Inv_start[i] - data$Demand[i]\n        }\n      }\n    }\n    \n   # Assign Stockout status\n\n  }\n  \n  return(data)\n}\n\n\n# Fill in Inv_end for the rest of the days\nfor (i in 2:nrow(mrp)) {\n  mrp$Inv_start[i] &lt;- mrp$Inv_end[i - 1]\n  mrp$Inv_end[i] &lt;- mrp$Inv_start[i] - mrp$Demand[i]\n}\n\n# Apply the reorder function\nresult &lt;- reorder_goods(mrp)\n\nfor (i in 1:nrow(result)){\n  result$Stockout[i] &lt;- ifelse(result$Inv_start[i] &lt; result$Demand[i], 1, 0)\n}\nreturn(result)\n}\n\nresult&lt;-f(\"WHB\",600,3,500)\n\n\nKết quả giả lập được trình bày như sau, trong đó:\n\nStarting inv: là tồn kho đầu ngày (hoặc đầu kì cho tháng/năm). Lượng hàng đầu ngày sẽ bằng lượng hàng cuối ngày hôm trước.\nEnding inv: là tồn kho cuối ngày, được tính bằng hiệu số của lượng hàng đầu ngày và nhu cầu của khách hàng.\nReorder: thời điểm bắt đầu đặt hàng mới.\nStock out: được gán bằng 1 khi lượng hàng đầu ngày nhỏ hơn nhu cầu của khách hàng.\n\n\n\nCode\nlibrary(reactable)\nlibrary(htmltools)\n# Reactable:\nreactable(result %&gt;% \n            mutate(Date = as.Date(Date),\n                   ROP = ifelse(ROP == 1, \"Reorder\",\"Nothing\"),\n                   Stockout = ifelse(Stockout == 1,\"Bad\",\"Good\")),\n  columns = list(\n    Date = colDef(name = \"Date\", \n                   sortable = TRUE, \n                   align = \"center\", \n                   headerStyle = list(background = \"#b0b0b0\")),  \n    Demand = colDef(name = \"Demand\", \n                    align = \"center\", \n                    headerStyle = list(background = \"#b0b0b0\")),  \n    Inv_start = colDef(name = \"Starting Inv\", \n                       align = \"center\", \n                       headerStyle = list(background = \"#b0b0b0\"),\n                       style = function(value) {\n                         color &lt;- ifelse(value &lt;= 0, \"#e00000\", \"#008000\")  \n                         list(color = color, fontWeight = \"bold\")\n                       }),\n    Inv_end = colDef(name = \"Ending Inv\", \n                     align = \"center\", \n                     headerStyle = list(background = \"#b0b0b0\"),\n                     style = function(value) {\n                       color &lt;- ifelse(value &lt;= 0, \"#e00000\", \"#008000\")  \n                       list(color = color, fontWeight = \"bold\")\n                     }),\n    ROP = colDef(name = \"Reorder point\", \n                      align = \"center\",\n                      headerStyle = list(background = \"#b0b0b0\"),\n                  filterable = TRUE,\n      filterMethod = JS(\"function(rows, columnId, filterValue) {\n        return rows.filter(function(row) {\n          return row.values[columnId].indexOf(filterValue) !== -1\n        })\n      }\"),\n                      cell = function(value) {\n                        style &lt;- ifelse(value == \"Reorder\", \n                                        \"background-color: green; color: white;\",\n                                        \"background-color: grey; color: white;\")  \n                        htmltools::tags$div(value, style = style)\n                      }),\n    Stockout = colDef(name = \"Stockout\", \n                  align = \"center\",\n                  headerStyle = list(background = \"#b0b0b0\"),  \n                  cell = function(value) {\n                    if (value == \"Good\") {\n                      htmltools::tags$span(\"✔️\", style = \"color: green; font-size: 18px;\")  # Checkmark\n                    } else {\n                      htmltools::tags$span(\"❌\", style = \"color: gray; font-size: 18px;\")  # Cross\n                    }\n                  })\n    \n  ),\n  defaultPageSize = 10,\n  highlight = TRUE,\n  striped = TRUE,\n  bordered = TRUE,\n  resizable = TRUE\n)"
  },
  {
    "objectID": "MRP.html#thêm-safety-leadtime",
    "href": "MRP.html#thêm-safety-leadtime",
    "title": "Giới thiệu",
    "section": "2.3 Thêm safety leadtime:",
    "text": "2.3 Thêm safety leadtime:\nBây giờ chúng ta đã có kế hoạch dự kiến trong tháng tiếp theo giống ta đã biết trước được khi nào thì nhà kho sẽ bị outstock và dựa vào đó, ta có thể đưa ra phương án để tránh việc này.\nNhư trong trường hợp này, nhà kho B bị outstock tới tận 16 lận, một con số khá tệ. Là người quản lí kho, ta sẽ đưa ra phương án là đặt hàng trước 1 ngày dự kiến mà lượng hàng tồn kho nhỏ hơn safety stock.\n\n\n\n\n\n\n\nĐể so sánh sự quan trọng của safety leadtime, mình sẽ sử dụng line chart để đánh giá mức độ dịch vụ của nhà kho dựa trên tiêu chí high service: càng ít outstock thì càng tốt. Qua biểu đồ dưới đây, ta cũng dễ dàng thấy là việc đặt hàng trước 1 ngày hàng tồn kho nhỏ hơn safety stock giảm tình trạng outstock đáng kể (từ 16 lần xuống còn 6 lần trong tháng).\n\n\nCode\n# Create time series objects with daily frequency\nlibrary(xts)\ndemand_ts &lt;-xts(result$Demand, \n                order.by = result$Date)\ninv_start_ts &lt;- xts(result$Inv_start, \n                   order.by = result$Date)\ninv_start_safety_ts &lt;- xts(result$Inv_start_safety,\n                           order.by = result$Date)\n\n# Create line plot:\nlibrary(dygraphs)\ncombine &lt;- cbind(demand_ts,\n                 inv_start_ts,\n                 inv_start_safety_ts)\n\ndygraph(combine) %&gt;%\n  dySeries(\"demand_ts\", label = \"Demand\") %&gt;%\n  dySeries(\"inv_start_ts\", label = \"Starting inv\") %&gt;% \n  dySeries(\"inv_start_safety_ts\", label = \"Starting safety inv\") %&gt;% \n  dyOptions(fillGraph = TRUE, fillAlpha = 0.4)\n\n\n\n\n\n\nTuy nhiên nếu xét về tiêu chí tối ưu chi phí - saving cost thì ta cần tính toán thêm chi phí của việc outstock và chi phí tồn kho - inventory cost.\nGiả sử chi phí của inventory cost là 40$/sản phẩm và outstock cost là 15$/sản phẩm thì ta sẽ có bảng so sánh như bảng dưới đây. Kết quả cho thấy phương pháp truyền thống giúp chi phí ở mức thấp hơn.\n\n\nCode\nlibrary(gt)\nlibrary(gtExtras)\ngt(result %&gt;% \n  summarise(`Normal` = sum(Stockout),\n            `Safety Leadtime` = sum(Stock_out_safety)) %&gt;% \n  pivot_longer(cols = everything(),\n               names_to = \"Approach\",\n               values_to = \"Outstock cost\") %&gt;% \n  mutate(`Outstock cost` = `Outstock cost` * 30,\n         `Inventory cost` = c(result$Inv_end[nrow(result)],\n                              result$Inv_end_safety[nrow(result)])\n  ) %&gt;% \n  mutate(`Inventory cost` = ifelse(`Inventory cost` &lt; 0,0,`Inventory cost`*15),\n         Total = `Outstock cost` + `Inventory cost`))  %&gt;%\n  tab_header(\n    title = \"Inventory and Stockout Costs\"\n  ) %&gt;%\n  cols_label(\n    Approach = \"Approach\",\n    `Outstock cost` = \"Outstock Cost ($)\",\n    `Inventory cost` = \"Inventory Cost ($)\"\n  ) %&gt;%\n  fmt_currency(\n    columns = c(`Outstock cost`, `Inventory cost`, Total),\n    currency = \"USD\"\n  ) %&gt;% \n  gt_highlight_rows(\n     rows = 2,\n     fill = \"orange\",\n     bold_target_only = TRUE,\n     target_col = Total\n   )  %&gt;%\n   cols_align(\n    align = \"center\",\n    columns = everything()\n  ) %&gt;% \n  gt_theme_pff() %&gt;% \n  tab_options(\n    table.width = \"80%\"\n  )\n\n\n\n\n\n\n  \n    \n      Inventory and Stockout Costs\n    \n    \n    \n      Approach\n      Outstock Cost ($)\n      Inventory Cost ($)\n      Total\n    \n  \n  \n    Normal\n$480.00\n$0.00\n$480.00\n    Safety Leadtime\n$180.00\n$450.00\n$630.00"
  }
]